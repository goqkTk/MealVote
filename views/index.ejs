<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MealVote</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- Socket.IO 클라이언트 -->
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            user-select: none;
        }
        * {
            user-select: none;
        }
        .navbar {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 0.3rem 1rem;
            min-height: 40px;
        }
        .navbar-brand {
            font-size: 1.4rem;
            padding: 0;
            line-height: 1;
            font-weight: 600;
        }
        .navbar .btn {
            padding: 0.7rem 1rem;
            font-size: 0.9rem;
            line-height: 1;
        }
        .navbar .d-flex {
            align-items: center;
        }
        .navbar .me-3 {
            margin-right: 1.5rem !important;
        }
        .navbar .fa-user {
            margin-right: 0.3rem !important;
        }
        .container {
            max-width: 1200px;
            margin: 1.5rem auto;
            padding: 0 1rem;
        }
        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .btn {
            border: none;
            padding: 0.8rem 2rem;
            border-radius: 10px;
            font-weight: 500;
            transition: all 0.2s;
        }
        .btn-primary {
            background: #f8f9fa;
            color: #212529;
        }
        .btn-primary:hover {
            background: #0d6efd;
            color: white;
        }
        .btn-danger {
            background: #f8f9fa;
            color: #212529;
        }
        .btn-danger:hover {
            background: #dc3545;
            color: white;
        }
        .btn-secondary {
            background: #f8f9fa;
            color: #212529;
        }
        .btn-secondary:hover {
            background: #6c757d;
            color: white;
        }
        .teacher-actions {
            display: none;
        }
        .teacher .teacher-actions {
            display: block;
        }
        .menu-card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.2s;
        }
        .menu-card:hover {
            border-color: #0d6efd;
            background-color: #f8f9fa;
        }
        .menu-card.selected {
            border-color: #0d6efd;
            background-color: #e7f1ff;
        }
        .menu-card .menu-price {
            color: #6c757d;
            font-size: 0.9em;
        }
        textarea[name="description"] {
            resize: none;
        }
        .modal-footer .btn {
            width: 120px;
        }
        .input-group .btn-danger {
            padding: 0.5rem 1rem;
        }
        .input-group .btn-danger:hover {
            background: #dc3545;
            color: white;
        }
        .vote-date {
            text-align: center;
            font-size: 1.2rem;
            font-weight: 500;
            color: #495057;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 8px;
            transition: all 0.2s;
        }
        .vote-date:hover {
            background-color: #f8f9fa;
        }
        .vote-date input[type="date"] {
            display: none;
        }
        .vote-date.editing {
            background-color: #f8f9fa;
        }
        .navbar .btn-danger.btn-sm {
            padding: 0.3rem 0.8rem;
        }
        .voter-name {
            list-style: none;
            padding: 0.5rem 0;
            margin: 0;
            border-bottom: 1px solid #eee;
        }
        .voter-name:last-child {
            border-bottom: none;
        }
        .modal-dialog {
            display: flex;
            align-items: center;
            min-height: calc(100vh - 60px);
        }
        .modal-content {
            margin: 0 auto;
        }
        .card-body .btn-sm {
            padding: 0.25rem 0.6rem;
            font-size: 0.8rem;
        }
        #restaurantModal .btn-secondary.btn-sm {
            padding: 0.3rem 0.8rem;
            font-size: 0.85rem;
        }
        #restaurantModal .input-group .btn-danger {
            border: 1px solid #ced4da;
            padding: 0.375rem 0.75rem; /* Bootstrap 기본 폼 컨트롤/버튼 패딩 */
        }
        #restaurantModal .input-group .btn-danger:hover {
            border-color: #dc3545;
        }
        #voteHistory .badge.bg-primary {
            cursor: pointer;
        }
        @media (max-width: 768px) {
            .card-body .text-muted i.fa-calendar {
                margin-right: 0.5rem;
            }
            .card-body .text-muted i.fa-clock {
                margin-left: 0 !important;
                margin-right: 0.5rem;
            }
            .card-body .text-muted {
                display: flex;
                flex-direction: column;
                align-items: flex-start;
            }
            .card-body .text-muted span {
                margin-bottom: 0;
            }
        }
        .card-body .text-muted span i {
            margin-right: 0.5rem;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container">
            <a class="navbar-brand">MealVote</a>
            <div class="d-flex align-items-center">
                <span class="me-3" style="cursor: pointer;" onclick="showSettingsModal()">
                    <i class="fas fa-user"></i>
                    <span id="userName"></span>
                </span>
                <button id="logoutButton" class="btn btn-outline-secondary btn-sm">로그아웃</button>
            </div>
        </div>
    </nav>

    <!-- 알림 구독 섹션 (로그인 사용자에게만 표시) -->
    

    <div class="container">
        <!-- 선생님용 액션 버튼 -->
        <div class="teacher-actions mb-4">
            <button class="btn btn-primary me-2" onclick="showAddRestaurantModal()">
                <i class="fas fa-plus me-2"></i>가게 추가
            </button>
            <button class="btn btn-primary" onclick="showCreateVoteModal()">
                <i class="fas fa-vote-yea me-2"></i>투표 생성
            </button>
        </div>

        <!-- 선생님용 가게 목록 -->
        <div class="teacher-actions mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="fas fa-store me-2"></i>가게 목록
                    </h5>
                    <div id="restaurantList" class="row">
                        <!-- 가게 목록이 여기에 동적으로 추가됩니다 -->
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-vote-yea me-2"></i>현재 진행 중인 투표
                        </h5>
                        <div id="currentVote">
                            <!-- 현재 진행 중인 투표가 여기에 표시됩니다 -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title d-flex justify-content-between align-items-center">
                            <span>
                                <i class="fas fa-history me-2"></i>투표 기록
                            </span>
                            <button class="btn btn-link btn-sm text-dark" onclick="showAllVoteHistory()">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </h5>
                        <div id="voteHistory">
                            <!-- 투표 기록이 여기에 표시됩니다 -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 가게 추가/수정 모달 -->
    <div class="modal fade" id="restaurantModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="restaurantModalTitle">가게 추가</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="restaurantForm">
                        <input type="hidden" name="restaurantId">
                        <div class="mb-3">
                            <label class="form-label">가게 이름 <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">설명</label>
                            <textarea class="form-control" name="description" rows="3" style="resize: none;"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">메뉴 <span class="text-danger">*</span></label>
                            <div id="menuList">
                                <div class="input-group mb-2">
                                    <input type="text" class="form-control" name="menuNames[]" placeholder="메뉴 이름" required>
                                    <input type="number" class="form-control" name="menuPrices[]" placeholder="가격" required>
                                    <button type="button" class="btn btn-danger" onclick="removeMenu(this)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            <button type="button" class="btn btn-secondary btn-sm" onclick="addMenuField()">
                                <i class="fas fa-plus me-2"></i>메뉴 추가
                            </button>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" onclick="submitRestaurant()">저장</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 투표 생성 모달 -->
    <div class="modal fade" id="createVoteModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">투표 생성</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="createVoteForm">
                        <div class="mb-3">
                            <label class="form-label">투표 제목 <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" name="title" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">가게 선택 <span class="text-danger">*</span></label>
                            <select class="form-select" name="restaurantId" required onchange="loadRestaurantMenus(this.value)">
                                <option value="">가게를 선택하세요</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">투표할 메뉴 선택 <span class="text-danger">*</span></label>
                            <div id="menuSelection" class="row">
                                <!-- 메뉴 카드들이 여기에 동적으로 추가됩니다 -->
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">투표 마감 시간 <span class="text-danger">*</span></label>
                            <input type="datetime-local" name="endTime" class="form-control" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" onclick="submitVote()">생성</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 커스텀 달력 모달 -->
    <div class="modal fade" id="datePickerModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">날짜 선택</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="calendar">
                        <div class="calendar-header">
                            <button class="btn btn-link" onclick="prevMonth()">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <span class="current-month"></span>
                            <button class="btn btn-link" onclick="nextMonth()">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                        <div class="calendar-weekdays">
                            <div>일</div>
                            <div>월</div>
                            <div>화</div>
                            <div>수</div>
                            <div>목</div>
                            <div>금</div>
                            <div>토</div>
                        </div>
                        <div class="calendar-days"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 전체 투표 기록 모달 -->
    <div class="modal fade" id="allVoteHistoryModal" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">전체 투표 기록</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="allVoteHistoryList"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- 투표자 목록 모달 -->
    <div class="modal fade" id="votersModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="votersModalTitle">투표자 목록</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="votersList"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- 설정 모달 -->
    <div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="settingsModalLabel">설정</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- 여기에 다른 사용자 설정 내용을 추가할 수 있습니다. -->

                    <div class="card mb-3">
                        <div class="card-body">
                             <h6 class="card-title">푸시 알림 설정</h6>
                             <div id="pushNotificationSettings" class="mt-3">
                                 <p id="notificationStatus" class="mb-2"></p>
                                 <button id="subscribeButton" class="btn btn-primary btn-sm"></button>
                                 <button id="unsubscribeButton" class="btn btn-danger btn-sm" style="display: none;">알림 구독 취소</button>
                             </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Custom JS -->
    <script src="/js/auth.js"></script>
    <script src="/js/vote.js"></script>

    <script>
        // 서비스 워커 등록
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/service-worker.js')
                    .then(registration => {
                        console.log('서비스 워커 등록 성공:', registration);
                    })
                    .catch(error => {
                        console.error('서비스 워커 등록 실패:', error);
                    });
            });
        }

        // 알림 권한 상태 확인 및 UI 업데이트 (로그인 상태 확인 후 실행)
        async function updateNotificationUI() {
            const userType = await checkUserType(); // auth.js 또는 vote.js에 정의된 함수 사용
            const notificationSection = document.getElementById('pushNotificationSettings');
            const notificationStatus = document.getElementById('notificationStatus');
            const subscribeButton = document.getElementById('subscribeButton');
            const unsubscribeButton = document.getElementById('unsubscribeButton');

            // 로그인 상태가 아니면 알림 설정 섹션 숨김
            if (!userType) {
                 if (notificationSection) notificationSection.style.display = 'none';
                 return;
            }

            // 브라우저 푸시 알림 지원 여부 확인
            if (!('Notification' in window) || !('serviceWorker' in navigator) || !('PushManager' in window)) {
                 if (notificationSection) {
                     notificationSection.style.display = 'block'; // 지원 안 해도 섹션은 표시하여 메시지 전달
                     notificationStatus.textContent = '이 브라우저는 푸시 알림을 지원하지 않습니다.';
                     subscribeButton.style.display = 'none';
                     unsubscribeButton.style.display = 'none';
                 }
                 return;
            }

            // 알림 설정 섹션 표시
            if (notificationSection) notificationSection.style.display = 'block';

            // 현재 알림 권한 상태 확인
            const permission = Notification.permission;

            try {
                if (permission === 'denied') {
                    notificationStatus.textContent = '알림 권한이 거부되었습니다. 브라우저 설정에서 변경해주세요.';
                    subscribeButton.style.display = 'none';
                    unsubscribeButton.style.display = 'none';
                } else if (permission === 'granted') {
                    // 권한은 허용되었지만, 실제로 구독 중인지 확인
                    const registration = await navigator.serviceWorker.ready;
                    const subscription = await registration.pushManager.getSubscription();

                    if (subscription) {
                        // 구독 중
                        notificationStatus.textContent = '알림이 허용되었습니다 (구독 중). 새로운 투표 알림을 받습니다.';
                        subscribeButton.style.display = 'none';
                        unsubscribeButton.style.display = 'inline-block';
                    } else {
                        // 권한은 허용되었지만, 구독 정보가 없음 (구독 취소했거나, 처음 상태)
                        notificationStatus.textContent = '알림이 허용되었지만 구독이 필요합니다.';
                        subscribeButton.textContent = '알림 구독';
                        subscribeButton.style.display = 'inline-block';
                        unsubscribeButton.style.display = 'none';
                    }
                } else { // permission === 'default' 또는 다른 상태
                    notificationStatus.textContent = '새로운 투표 생성 시 알림을 받으려면 구독해주세요.';
                    subscribeButton.textContent = '알림 구독';
                    subscribeButton.style.display = 'inline-block';
                    unsubscribeButton.style.display = 'none';
                }
            } catch (error) {
                console.error('알림 UI 업데이트 오류:', error);
                if (notificationStatus) notificationStatus.textContent = '알림 상태를 불러오는 중 오류가 발생했습니다.';
                if (subscribeButton) subscribeButton.style.display = 'none';
                if (unsubscribeButton) unsubscribeButton.style.display = 'none';
            }
        }

        // 페이지 로드 후 로그인 상태 확인 완료 시 UI 업데이트
        document.addEventListener('DOMContentLoaded', () => {
             // 기존 DOMContentLoaded 리스너에서 checkAuthState() 호출 후 이 함수를 호출하거나,
             // checkAuthState()가 완료되는 시점에 이 함수를 호출하도록 조정 필요
             // 일단은 페이지 로드 시 바로 호출되도록 추가
             updateNotificationUI();

             // 알림 구독 버튼 클릭 이벤트 (설정 모달 안의 버튼)
             document.getElementById('settingsModal').addEventListener('click', async (event) => {
                 if (event.target.id === 'subscribeButton') {
                     try {
                         // 알림 권한 요청
                         const permission = await Notification.requestPermission();
                         
                         if (permission === 'granted') {
                             // 서비스 워커 등록 확인
                             const registration = await navigator.serviceWorker.ready;
                             
                             // 푸시 구독 생성
                             const subscription = await registration.pushManager.subscribe({
                                 userVisibleOnly: true,
                                 applicationServerKey: '<%= publicVapidKey %>'
                             });

                             // 구독 정보를 서버에 전송
                             const response = await fetch('/api/votes/subscribe', {
                                 method: 'POST',
                                 headers: {
                                     'Content-Type': 'application/json',
                                 },
                                 body: JSON.stringify(subscription)
                             });

                             if (response.ok) {
                                 alert('알림 구독이 완료되었습니다.');
                             } else {
                                 const data = await response.json();
                                 alert('구독 정보 저장 실패: ' + (data.error || response.statusText));
                             }
                         } else if (permission === 'denied') {
                              alert('알림 권한이 거부되었습니다. 브라우저 설정에서 변경해주세요.');
                         } else {
                              alert('알림 권한 허용이 필요합니다.');
                         }
                         updateNotificationUI(); // UI 업데이트
                     } catch (error) {
                         console.error('알림 구독 오류:', error);
                         alert('알림 구독 중 오류가 발생했습니다: ' + error.message);
                         updateNotificationUI(); // 에러 발생 시 UI 업데이트
                     }
                 } else if (event.target.id === 'unsubscribeButton') { // 알림 구독 취소 버튼 클릭 이벤트
                      try {
                          if (!confirm('푸시 알림 구독을 취소하시겠습니까?')) return;

                          // 현재 구독 정보 가져오기
                          const registration = await navigator.serviceWorker.ready;
                          const subscription = await registration.pushManager.getSubscription();
                          
                          if (subscription) {
                              // 구독 해제 (브라우저에서)
                              await subscription.unsubscribe();
                              
                              // 서버에서 구독 정보 삭제
                              const response = await fetch('/api/votes/unsubscribe', {
                                  method: 'POST',
                                  headers: {
                                      'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify({ endpoint: subscription.endpoint }) // 구독 취소는 endpoint만 보내도 됨
                              });

                              if (response.ok) {
                                  alert('알림 구독이 취소되었습니다.');
                              } else {
                                  const data = await response.json();
                                  alert('구독 정보 삭제 실패: ' + (data.error || response.statusText));
                              }
                          }
                          updateNotificationUI(); // UI 업데이트
                      } catch (error) {
                          console.error('알림 구독 취소 오류:', error);
                          alert('알림 구독 취소 중 오류가 발생했습니다: ' + error.message);
                          updateNotificationUI(); // 에러 발생 시 UI 업데이트
                      }
                 }
             });

        });

    </script>
</body>
</html> 